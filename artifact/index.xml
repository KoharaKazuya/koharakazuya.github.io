<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kohara&#39;s Page </title>
    <link>http://koharakazuya.github.io/artifact/</link>
    <language>ja-jp</language>
    <author>Kohara Kazuya</author>
    
    <updated>Mon, 19 Sep 2016 19:58:00 JST</updated>
    
    <item>
      <title>Node パッケージ md2img を作った</title>
      <link>http://koharakazuya.github.io/artifact/2016-09-19-md2img/</link>
      <pubDate>Mon, 19 Sep 2016 19:58:00 JST</pubDate>
      <author>Kohara Kazuya</author>
      <guid>http://koharakazuya.github.io/artifact/2016-09-19-md2img/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/md2img&#34;&gt;Node パッケージ md2img&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;これは何か:daa4a4b43cf3c4ec7514c429fa87727a&#34;&gt;これは何か&lt;/h2&gt;

&lt;p&gt;コマンドラインで使える Markdown ファイルを HTML レンダリングし、
画像 (PNG) のバイナリデータとして標準出力に流せるツール。&lt;/p&gt;

&lt;p&gt;↓ iTerm2 3.0 のインライン画像表示機能と組み合わせて利用している例を見てほしい。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/KoharaKazuya/md2img/f3239ac8fd6ccd583e049211c14ab160218e2696/readme_assets/usage-sample.gif&#34; alt=&#34;使い方一例&#34; /&gt;&lt;/p&gt;

&lt;p&gt;レンダリングは GitHub 上の見た目と同じに目指している。&lt;/p&gt;

&lt;h2 id=&#34;なぜ作ったか:daa4a4b43cf3c4ec7514c429fa87727a&#34;&gt;なぜ作ったか&lt;/h2&gt;

&lt;p&gt;Markdown ファイルのリアルタイムプレビューができるエディタ、
WYSWIG エディタなど、プレビュー方法はいくらでもあるんだけど、
意外にプレビューしながら書くことは少ない。&lt;/p&gt;

&lt;p&gt;ただ、コミット直前には確認しておきたいなー、と思うことがあるので
わざわざそのためだけに Markdown エディタを開くのもちょっと……って思ったので。&lt;/p&gt;

&lt;h2 id=&#34;技術的に面白かったところ:daa4a4b43cf3c4ec7514c429fa87727a&#34;&gt;技術的に面白かったところ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://phantomjs.org/&#34;&gt;PhantomJS&lt;/a&gt; とその node 用アダプタ &lt;a href=&#34;https://github.com/amir20/phantomjs-node&#34;&gt;phantomjs-node&lt;/a&gt; を触れた。&lt;/p&gt;

&lt;p&gt;コンテンツ書き換えからアセットロード完了 (Markdown 内の画像ダウンロード) まで
待機する必要性を理解しておらず、ちょっと詰まった。
結局 PhantomJS のデバッグ方法を確立しなかったのが心残り。
(PhantomJS の node-inspector 風のサーバーへはアクセスできたが、
node-phantom だとちょっとよくわからなかった)&lt;/p&gt;

&lt;p&gt;今までよくわかっていなかった node-gyp が何かなども調べてなんとなく理解。&lt;/p&gt;

&lt;p&gt;GFM + GitHub の CSS に一致するように作りたかったので、Atom &lt;a href=&#34;https://atom.io/packages/markdown-preview&#34;&gt;Markdown Preview&lt;/a&gt;
パッケージを参考にした。&lt;/p&gt;

&lt;p&gt;npm にパッケージ登録するのは初めて。
利用例のアニメーション gif を git 管理に入れちゃって、ダウンロードが
超重くなる落とし穴を以前に Atom パッケージ公開 (&lt;a href=&#34;https://atom.io/packages/tree-view-background&#34;&gt;tree-view-background&lt;/a&gt;)
のときに踏み抜いてたので、今回は気をつけた。
.npmignore に追加するだけなんだけど。&lt;/p&gt;
</description>
      <images>
        <url>https://raw.githubusercontent.com/KoharaKazuya/md2img/f3239ac8fd6ccd583e049211c14ab160218e2696/readme_assets/usage-sample.gif</url>
      </images>
    </item>
    
    <item>
      <title>Flux &#43; React でオセロ</title>
      <link>http://koharakazuya.github.io/artifact/2016-01-01-flux-reversi/</link>
      <pubDate>Fri, 01 Jan 2016 22:44:00 JST</pubDate>
      <author>Kohara Kazuya</author>
      <guid>http://koharakazuya.github.io/artifact/2016-01-01-flux-reversi/</guid>
      <description>&lt;div id=&#34;app&#34;&gt;&lt;/div&gt;

&lt;script src=&#34;http://koharakazuya.github.io/js/flux-reversi/bundle.js&#34;&gt;&lt;/script&gt;
</description>
      <images>
        <url>http://koharakazuya.github.io/</url>
      </images>
    </item>
    
    <item>
      <title>Hugo のテーマ、Hugo Shelf を作った</title>
      <link>http://koharakazuya.github.io/artifact/2015-08-02-hugo-shelf/</link>
      <pubDate>Sun, 02 Aug 2015 23:27:31 JST</pubDate>
      <author>Kohara Kazuya</author>
      <guid>http://koharakazuya.github.io/artifact/2015-08-02-hugo-shelf/</guid>
      <description>&lt;p&gt;4 年前に作った自作テーマがダサく感じて 1 年ほど経過してたので、
思い切って作りなおしました。
以前は GitHub Pages がサポートしている &lt;a href=&#34;//jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;
を使ってましたが、ページ生成が遅いのとシンプルさに欠けるため、
&lt;a href=&#34;//gohugo.io&#34;&gt;Hugo&lt;/a&gt; に乗り換えました。&lt;/p&gt;

&lt;p&gt;で、ついでに &lt;a href=&#34;//github.com/KoharaKazuya/HugoShelf&#34;&gt;Hugo Shelf&lt;/a&gt;
というテーマも作りました。
このページで使ってるテーマです。&lt;/p&gt;

&lt;p&gt;「作ったもの」と「メモ」という分け方にしか使えないからダメですね……。&lt;/p&gt;
</description>
      <images>
        <url>//gohugo.io/img/hugo.png</url>
      </images>
    </item>
    
    <item>
      <title>Alfred 用の Todo.txt 連携ワークフローを作った</title>
      <link>http://koharakazuya.github.io/artifact/2013-11-05-todotxtalfredworkflow/</link>
      <pubDate>Tue, 05 Nov 2013 00:00:00 JST</pubDate>
      <author>Kohara Kazuya</author>
      <guid>http://koharakazuya.github.io/artifact/2013-11-05-todotxtalfredworkflow/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.alfredapp.com/&#34;&gt;Alfred&lt;/a&gt; といえば QuickSilver に並んで Mac で有名なコマンドランチャーアプリ。
無料版は機能制限されているんだけど、先日我慢できずにライセンスを購入。
約 2,700 円だったけど、後悔は（まだ）していない。&lt;/p&gt;

&lt;p&gt;せっかく買ったんだから開放された機能をガッツリ弄っていたら、&lt;a href=&#34;http://todotxt.com/&#34;&gt;Todo.txt&lt;/a&gt; を Alfred から操作したくなった。
Todo.txt は TODO 管理データをテキストで扱うってところが味噌のアプリ。
Web サービス利用系はサービスが終了すれば消えるし、他のバイナリでデータ管理しているアプリもエクスポートが面倒。
将来的にずっと使える保証があるのはテキストデータだけでしょ、ってことで使ってます。
&lt;strong&gt;なにより CLI があるのが一番ですが。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Todo.txt を扱う Alfred Workflow は&lt;a href=&#34;https://github.com/madc/alfred-todotxt&#34;&gt;既にあるっぽい&lt;/a&gt;ですが、
Alfred のせっかくの機能を十分に活かしきれていなかったみたいなので、
自分で作ることにしました。ただのシェルスクリプトだし。&lt;/p&gt;

&lt;p&gt;シンプルなラッパーとして&lt;code&gt;todo add test&lt;/code&gt;→通知、みたいなこともできますが、
&lt;code&gt;add&lt;/code&gt;,&lt;code&gt;do&lt;/code&gt;,&lt;code&gt;list&lt;/code&gt;に対して特化したコマンドを追加してます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koharakazuya.github.io/images/2013-11-05-todotxtalfredworkflow.png&#34; alt=&#34;Alfred 上から Todo.txt のタスクを表示&#34; /&gt;&lt;/p&gt;

&lt;p&gt;こんな感じに。
&lt;code&gt;todo&lt;/code&gt;がただのラッパー。
&lt;code&gt;to [task]&lt;/code&gt;で新規タスクの追加。
&lt;code&gt;list&lt;/code&gt;で現在のタスクの確認。
&lt;code&gt;done [task_number]&lt;/code&gt;でタスクの完了が出来ます。&lt;/p&gt;

&lt;p&gt;もし良かったら使って見て下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://koharakazuya.github.io/bin/Todo.txt.alfredworkflow&#34;&gt;&lt;em&gt;Download&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
</description>
      <images>
        <url>//www.alfredapp.com/images/logo.png</url>
      </images>
    </item>
    
  </channel>
</rss>
